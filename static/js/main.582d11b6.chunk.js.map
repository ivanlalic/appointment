{"version":3,"sources":["components/form.js","components/cita.js","App.js","serviceWorker.js","index.js"],"names":["Form","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","propType","PropTypes","object","isRequired","func","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+OA6IeA,EAzIF,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAGKC,mBAAS,CACpCC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,KARY,mBAGnBC,EAHmB,KAGbC,EAHa,OAWOP,oBAAS,GAXhB,mBAWnBQ,EAXmB,KAWZC,EAXY,KAgBpBC,EAAkB,SAAAC,GACpBJ,EAAe,2BACRD,GADO,kBAETK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAO1Bb,EAA+CK,EAA/CL,QAASC,EAAsCI,EAAtCJ,YAAaC,EAAyBG,EAAzBH,MAAOC,EAAkBE,EAAlBF,KAAMC,EAAYC,EAAZD,SAuC3C,OACI,kBAAC,WAAD,KACI,0CAECG,EAAQ,uBAAGO,UAAU,gBAAb,qCAAoE,KAE7E,0BACIC,SAxCO,SAAAL,GACfA,EAAEM,iBAIoB,KAAnBhB,EAAQiB,QAAwC,KAAvBhB,EAAYgB,QAAkC,KAAjBf,EAAMe,QAAiC,KAAhBd,EAAKc,QAAqC,KAApBb,EAASa,QAM/GT,GAAgB,GAGhBH,EAAKa,GAAKC,cAIVrB,EAAUO,GAIVC,EAAe,CACXN,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,MArBVI,GAAgB,KAoCZ,uDACA,2BACIY,KAAK,OACLR,KAAK,UACLE,UAAU,eACVO,YAAY,uBACZC,SAAUb,EACVI,MAAOb,IAGX,sDACA,2BACIoB,KAAK,OACLR,KAAK,cACLE,UAAU,eACVO,YAAY,sBACZC,SAAUb,EACVI,MAAOZ,IAGX,wCACA,2BACImB,KAAK,OACLR,KAAK,QACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOX,IAGX,uCACA,2BACIkB,KAAK,OACLR,KAAK,OACLE,UAAU,eACVQ,SAAUb,EACVI,MAAOV,IAGX,0CACA,8BACIW,UAAU,eACVF,KAAK,WACLU,SAAUb,EACVI,MAAOT,IAGX,4BACIgB,KAAK,SACLN,UAAU,+BAFd,mB,gBCzHVS,EAAO,SAAC,GAAD,IAAElB,EAAF,EAAEA,KAAMmB,EAAR,EAAQA,aAAR,OACT,yBAAKV,UAAU,QACX,uCAAY,8BAAOT,EAAKL,SAAxB,KACA,qCAAU,8BAAOK,EAAKJ,aAAtB,KACA,oCAAS,8BAAOI,EAAKH,OAArB,KACA,oCAAS,8BAAOG,EAAKF,MAArB,KACA,wCAAa,8BAAOE,EAAKD,UAAzB,KAEA,4BACIU,UAAU,+BACVW,QAAU,kBAAMD,EAAanB,EAAKa,MAFtC,iBAORK,EAAKG,SAAW,CACZrB,KAAMsB,IAAUC,OAAOC,WACvBL,aAAcG,IAAUG,KAAKD,YAGlBN,QC0DAQ,MA7Ef,WAKE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAChDJ,IACHA,EAAiB,IAPN,MAYiBjC,mBAASiC,GAZ1B,mBAYNK,EAZM,KAYCC,EAZD,KAoBbC,qBAAW,WACNP,EACDG,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,IAE7CF,aAAaK,QAAQ,QAASP,KAAKQ,UAAU,OAG/C,CAACJ,EAAOL,IAKV,IAQMR,EAAe,SAAAN,GACnB,IAAMwB,EAAcL,EAAMM,QAAO,SAAAtC,GAAI,OAAIA,EAAKa,KAAOA,KACrDoB,EAAaI,IAIPE,EAA0B,IAAjBP,EAAMQ,OAAe,eAAiB,uBAGvD,OACE,kBAAC,WAAD,KACE,0DAEA,yBAAK/B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEhB,UAzBM,SAAAO,GAChBiC,EAAa,GAAD,mBACPD,GADO,CAEVhC,SAyBI,yBAAKS,UAAU,mBACb,4BAAK8B,GACJP,EAAMS,KAAI,SAAAzC,GAAI,OACb,kBAAC,EAAD,CACE0C,IAAK1C,EAAKa,GACVb,KAAMA,EACNmB,aAAcA,YC1DVwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAM2D,c","file":"static/js/main.582d11b6.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; // para crear id unico de cada cita\r\nimport PropTypes from 'prop-types'; // para documentar componentes, abajo de todo\r\n\r\nconst Form = ({crearCita}) => {              //props, destructuring object\r\n\r\n    // Crear state de citas\r\n    const [cita, actualizarCita] = useState({   // el objeto se llama Cita\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n\r\n\r\n    // Funcion ejecudata cada vez que usuario escribe en input\r\n    const actualizarState = e => {\r\n        actualizarCita({                        // funcion que modifica al State\r\n            ...cita,                           // Spread operator para no modificar el cita original\r\n            [e.target.name]: e.target.value, // agrega el valor del campo name en el state\r\n\r\n        })                          \r\n    }\r\n\r\n    // Extraer los valores\r\n    \r\n    const { mascota, propietario, fecha, hora, sintomas} = cita; // evita escribir cita.mascota, cita.propietario, etc →pero debo pasarlo como value en cada item\r\n\r\n\r\n    \r\n    // When user press subtmit→send form\r\n\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        // 1ero→Validar\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            actualizarError(true) // si el error sale, se cambia a true, originalmente en false\r\n            return;                         // Cuando hay un error, debo poner return; para que no se siga ejecutando codigo. Luego me voy a crear el useState del error → const [error, actualizarError] = useState(false);\r\n        }\r\n\r\n        // 1.5→En caso que aplique mostrar el error, luego hay que eliminar el cartel en la web→\r\n        actualizarError(false);\r\n\r\n        // 2do→Asignar ID (key)\r\n        cita.id = uuidv4();             // crea ID unico de cada cita\r\n        \r\n        \r\n        // 3ero→Crear la cita\r\n        crearCita(cita);    \r\n\r\n\r\n        // 4to→Reiniciar Form SIEMPRE con el modificador del state!!!!!!!!!\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null} \r\n\r\n            <form           // le agrego el onSubmit\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre de la mascota</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre de la mascota\"\r\n                    onChange={actualizarState} // Should be called handleChange\r\n                    value={mascota}\r\n                    />\r\n\r\n                <label>Nombre del dueño</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del dueño\"\r\n                    onChange={actualizarState} // Should be called handleChange\r\n                    value={propietario}\r\n                    />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\" \r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} // Should be called handleChange\r\n                    value={fecha}\r\n                    />\r\n\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\" \r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} // Should be called handleChange\r\n                    value={hora}\r\n                    />\r\n\r\n                <label>Sintoma</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState} // Should be called handleChange\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar cita</button>\r\n                    \r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n        \r\n    );\r\n}\r\n\r\nForm.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n};\r\n \r\nexport default Form;","import React from 'react'\r\nimport PropTypes from 'prop-types'; // para documentar componentes, abajo de todo\r\n\r\nconst Cita = ({cita, eliminarCita}) =>  (    //le pasamos la cita completa\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span> </p>\r\n        <p>Owner: <span>{cita.propietario}</span> </p>\r\n        <p>Date: <span>{cita.fecha}</span> </p>\r\n        <p>Hour: <span>{cita.hora}</span> </p>\r\n        <p>Symptoms: <span>{cita.sintomas}</span> </p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id) }\r\n        >Delete &times;</button>\r\n    </div>\r\n);\r\n\r\nCita.propType = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Form from './components/form';\nimport Cita from './components/cita';\n\nfunction App() {\n\n  // ACA SE PUEDE ESCRIBIR CODIGO DE JS VANILLA\n\n  //CITAS EN LOCALSTORAGE\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); //JSON.parse → lo convierte todo a string que es lo unico que puede guardar localStorage\n  if (!citasIniciales) {\n    citasIniciales = [];\n  } \n\n\n  // Array Citas (todas las citas vienen aca), no es el singular -cita- del form.js\n  const [citas, guardarCitas] = useState(citasIniciales); // esto seria que el valor inicial de citas = citasIniciales que es un array vacio o lo que tome del localStorage\n\n  // useEffect (siempre arrow function) para realizar ciertas operaciones cuando el state cambia→simil DOMContentLoaded()\n  // se ejecuta cuando el componente esta listo o cuando hya cambios en el componente.\n  // si le pasas un [] vacio, se ejecuta 1 sola vez.\n  // Lo quiero usar para que vez que se modifique el state de citas→localStorage\n  // si le paso [citas]→ejectua cada vez que se modifica ese state de citas!\n\n  useEffect( () => {\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas)) //citas (no 'citas') es la del useState...el array\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }\n  , [citas, citasIniciales]);\n\n\n\n  // Creo funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas, //copia del stateoriginal\n      cita //le agrego la cita que viene mandandose cuando le di click al submit\n    ]) // vendria a ser lo mismo que hacer→ citas.push(cita); pero en react hay que usar la funcion guardarCitas del useState\n  }\n\n  // FUNCION QUE ELIMINA CITA POR SU ID → debo pasarsela al componente <Cita />\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);         // itera en todas las citas y el filter te deja las citas cuyos id sean distintos del que pasas, el que pasaste te lo filtra*elimina\n    guardarCitas(nuevasCitas); // le paso nuevasCitas que ya es un array, por eso no lo pongo entre []\n  }\n\n    // MENSAJE CONDICIONAL CUANDO NO HAY CITAS\n    const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">  \n            <Form \n              crearCita={crearCita} // para comunicarse, props, con el formulario componente.\n            />\n          </div>   \n          <div className=\"one-half column\">  \n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita} // debo pasarla al componente tambien como props\n              />\n            ))}\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}